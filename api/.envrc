#!/usr/bin/env bash
source_up

unstrict_env

if [ -f "./flake.nix" ]; then
    FLAKE_PATH="."
else
    FLAKE_PATH="github:bruno-ebstein-pass-culture/pass-culture-main/devbox?dir=api"
fi
use flake "${FLAKE_PATH}" # put in your environnement _almost_ everything needed when you use [Nix](https://nixos.org)

strict_env

eval "$(devbox generate direnv --print-envrc)"

path_add LIBRARY_PATH /usr/local/opt/openssl/lib/ # needed to install psycopg2

# needed to run commands througth Flask with `flask shell`
dotenv ../env_file
dotenv ../development_env_file
dotenv ./local_env_file

# override .env file configuration
# export POSTGRES_USER="pass_culture"
# export POSTGRES_PASSWORD="passq"
# export POSTGRES_DB="pass_culture"
# export DATABASE_URL="postgresql://pass_culture:passq@localhost:5434/pass_culture"
# export DATABASE_URL="postgresql://pass_culture:passq@host.docker.internal/pass_culture"
# export REDIS_URL=redis://localhost:6379

# export POSTGRES_HOST="localhost:5434"
# export POSTGRES_HOST="host.docker.internal:5434"

# needed to start Flask locally with `flask run`
export FLASK_ENV="development"
export FLASK_APP="./src/pcapi/app.py"

# connect to local SQL with `pc psql`

# https://github.com/direnv/direnv/issues/592
layout_poetry() {
    PYPROJECT_TOML="${PYPROJECT_TOML:-pyproject.toml}"
    if [[ ! -f "$PYPROJECT_TOML" ]]; then
        log_status "No pyproject.toml found. Executing \`poetry init\` to create a \`$PYPROJECT_TOML\` first."
        poetry init
    fi

    if [[ -d ".venv" ]]; then
        VIRTUAL_ENV="$(pwd)/.venv"
    else
        VIRTUAL_ENV=$(
            poetry env info --path 2>/dev/null
            true
        )
    fi

    if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
        log_status "No virtual environment exists. Executing \`poetry install\` to create one."
        poetry install
        VIRTUAL_ENV=$(poetry env info --path)
    fi

    PATH_add "$VIRTUAL_ENV/bin"
    export POETRY_ACTIVE=1
    export VIRTUAL_ENV
}

layout poetry

poetry install --with dev

# if ! has bpython; then
#     pip install bpython # python with autocompletion ; broken on Nix
# fi
# export PYTHONBREAKPOINT="bpdb.set_trace" # `breakpoint()` with autocompletion using bpython

# export SQLALCHEMY_ECHO=1 # display generated SQL requests by SQLAlchemy

# needed to use `git-gamble`
TESTS_TO_RUN="$""(git list-modified-files | rg '/tests/' | sed 's@api/@@')"
# TESTS_TO_RUN=""
# TESTS_TO_RUN+=" tests/routes/native/v1/openapi_test.py"

ENV_VARIABLE_FOR_TEST=""
ENV_VARIABLE_FOR_TEST+=" RUN_ENV=tests"
ENV_VARIABLE_FOR_TEST+=" SQLALCHEMY_ECHO=1"

PYTEST_OPTIONS=""
# PYTEST_OPTIONS+=" --capture=no"
# PYTEST_OPTIONS+=" --pdb"
# PYTEST_OPTIONS+=" --verbose"
# PYTEST_OPTIONS+=" --verbose"
# PYTEST_OPTIONS+=" --durations=5"
# PYTEST_OPTIONS+=" --color=yes"
# PYTEST_OPTIONS+=" -rsx"

export GAMBLE_TEST_COMMAND="${ENV_VARIABLE_FOR_TEST} pytest ${PYTEST_OPTIONS} ${TESTS_TO_RUN}"
export GAMBLE_TEST_COMMAND="docker exec --workdir /usr/src/app/ --interactive --tty pc-flask sh -c '${GAMBLE_TEST_COMMAND}'" # run in docker
